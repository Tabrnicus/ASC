plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // https://mvnrepository.com/artifact/org.jline/jline-terminal
    compile group: 'org.jline', name: 'jline-terminal', version: '3.16.0'

    // https://mvnrepository.com/artifact/org.jline/jline-reader
    compile group: 'org.jline', name: 'jline-reader', version: '3.16.0'

    // https://mvnrepository.com/artifact/org.jline/jline-style
    compile group: 'org.jline', name: 'jline-style', version: '3.16.0'

}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.nchroniaris.ASC.client.core.Main'
        )
    }

    // https://www.baeldung.com/gradle-fat-jar
    // As far as I understand this creates a jar file with the JDBC dependency included in it. Since this program is meant to be distributed and used as a standalone jar (Java is the only "dependency" required) I believe it is a reasonable solution.
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    archiveFileName = 'ASC-client.jar'
}

// https://stackoverflow.com/questions/20389554/how-to-create-two-separate-jar-files-with-a-single-build-gradle
task serverJar(type: Jar) {

    from sourceSets.main.output

    manifest {
        attributes 'Main-Class': 'com.nchroniaris.ASC.server.core.Main'
    }

    archiveFileName = 'ASC-server.jar'

}

assemble.dependsOn(serverJar)

group 'com.nchroniaris'
version '0.0.1'